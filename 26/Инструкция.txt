0.Установить Django, создать проект(project), создать приложение(app), запустить сервер.
1) Создаём папку проекта и переходим в неё:
mkdir project
cd project
2) Создаём каркас проекта и переходим в папку проекта:
django-admin startproject myproject
cd myproject
3) Создаём приложение myapp:
python manage.py startapp myapp
4) Смотрим, что в текущей папке находится manage.py и запускаем сервер
python manage.py runserver
6) Открываем сайт в браузере по адресу
http://127.0.0.1:8000/
Если нужна остановка сервера - нажимаем Ctrl+C

ОСНОВЫ

1.Настроить представление в app/views.py
Например:
from django.http import HttpResponse
def index(request):
  return HttpRequest("Hello, world")

2.Настроить перенаправление, создав и заполнив файл app/urls.py
Например:
from django.urls import path
from . import views
urlpatterns = [
  path('', views.index, name='index'),
]

3.А потов добавив ссылку на этот файл в project/urls.py
Например:
from django.contrib import admin
from django.urls import include, path
urlpatterns = [
  path('app/', include('app.urls')),
  path('admin/', admin.site.urls),
]


БАЗА ДАННЫХ И МОДЕЛИ

4.Активировать приложение project/settings.py добавив <app>.apps.<App>Config в INSTALLED_APPS
Например:
INSTALLED_APPS = [
    'news.apps.NewsConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]


5.Настороить базу данных в project/settings.py (можно оставить настройки по-умолчанию)
Например:
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

6.Запустить общую миграцию для создания базы данных:
python manage.py migrate

7.Создать модель базы данных для приложения в файле app/models.py
Например:
from django.db import models
class News(models.Model):
    objects = models.Manager()
    news_title = models.CharField(max_length=50)
    news_text = models.CharField(max_length=200)
    pub_date = models.DateTimeField('Дата публикации')

    def __str__(self):
        return self.news_title

8.Запустить миграцию данных для приложения:
python manage.py makemigrations app
При этом будет выведен результат, в котором будет указан ID приложения, например 0001

9.Можете посмотреть, какие сформировались таблицы, используя:
python manage.py sqlmigrate app 0001 

10.Запустить ещё одну миграцию, чтобы обновить изменения в базе данных:
python manage.py migrate

11.Если хотите поработать с моделью напрямую из консоли, можно вызвать
python manage.py shell

АДМИНКА

12.Для работы с админкой нужно создать суперпользователя:
python manage.py createsuperuser
Далее нужно будет ввести имя пользователя, e-mail и пароль.
Если пароль слишком простой будет предложено его изменить или принять(y) указанный.

13.Для перехода в админку нужно будет запустить сервер(python manage.py runserver) 
И перейти по адресу:
http://127.0.0.1:8000/admin/
Где при первом входе надо будет ввести логин и пароль созданные ранее.

14.Для добавления приложения в админку нужно добавить строку в файл app/admin.py
Например: 
from django.contrib import admin
from .models import News
admin.site.register(News)

ПРЕДСТАВЛЕНИЯ

15.Для добавления представлений используется app/views.py
Например:
from django.http import HttpResponse
from django.template import loader
from .models import News
def news(request):
    latest_news_list = News.objects.order_by('-pub_date')[:5]
    template = loader.get_template('news/index.html')
    context = {
        'latest_news_list': latest_news_list,
    }
    return HttpResponse(template.render(context, request))

16.Для вызовов представлений app/urls.py
Например
from django.urls import path
from . import views
app_name = 'app'
urlpatterns = [
    # /news/
    path('', views.index, name='index'),
]

17.Шаблоны для представлений распологаются в папке:
app/templates/app/<имя файла>.html
Например:
{% for item in latest_news_list %}
    <h1>{{ item.news_title }}</h1>
    <p>{{ item.news_text }}</p>
{% endfor %}

ПОЛЕЗНЫЕ МЕЛОЧИ

18.Для работы с исключением 404 в views используются:
Для вызова исключения:
from django.http import Http404
raise Http404("Текст сообщения пользователю")
Для получения объекта, который может быть исключением 404:
object = get_object_or_404(Модель, pk=ПервичныйКлюч)
или для списков
list = get_list_or_404(Модель, pk=ПервичныйКлюч)

19.Для избавления от "хардкода" в шаблонах используются имена из urls.py
Например, в urls.py:
...
    path('<int:question_id>/detail/', views.detail, name='vote'),
...
Тогда в шаблоне можно изменить ссылку:
<a href="/vote/{{ question.id }}/">Ссылка</a>
на
<a href="{% url 'detail' question.id %}/">Ссылка</a>
И благодаря этому изменению мы больше не зависим от путей

20.Добавление пространства имён в app/urls.py
Перед urlpatterns добавляется строка:
app_name = 'app'
Это позволяет далее обращаться в шаблонах не 'detail', а 'app:detail' 
И избавляет конфликта имён между приложениями







